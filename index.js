const historical = {
    "bpi": {
        "2019-10-07": 8236.2084,
        "2019-10-08": 8201.6378,
        "2019-10-09": 8572.3808,
        "2019-10-10": 8582.1445,
        "2019-10-11": 8320.1716,
        "2019-10-12": 8328.6043,
        "2019-10-13": 8282.1773,
        "2019-10-14": 8337.819,
        "2019-10-15": 8162.44,
        "2019-10-16": 8003.8204,
        "2019-10-17": 8058.0581,
        "2019-10-18": 7970.2395,
        "2019-10-19": 7943.3471,
        "2019-10-20": 8200.3188,
        "2019-10-21": 8200.2461,
        "2019-10-22": 8073.4095,
        "2019-10-23": 7420.4158,
        "2019-10-24": 7460.6174,
        "2019-10-25": 8591.2239,
        "2019-10-26": 9171.3065,
        "2019-10-27": 9578.3676,
        "2019-10-28": 9458.2234,
        "2019-10-29": 9455.7247,
        "2019-10-30": 9225.9955,
        "2019-10-31": 9131.4106,
        "2019-11-01": 9197.6323,
        "2019-11-02": 9290.8966,
        "2019-11-03": 9202.4155,
        "2019-11-04": 9369.6281,
        "2019-11-05": 9326.5996,
        "2019-11-06": 9335.7524,
        "2019-11-07": 9226.4858,
        "2019-11-08": 8794.3586,
        "2019-11-09": 8798.0421,
        "2019-11-10": 9081.1869,
        "2019-11-11": 8711.5343,
        "2019-11-12": 8760.8927,
        "2019-11-13": 8749.5206,
        "2019-11-14": 8656.9709,
        "2019-11-15": 8500.6436,
        "2019-11-16": 8469.2609,
        "2019-11-17": 8537.3397,
        "2019-11-18": 8205.8064,
        "2019-11-19": 8118.4885,
        "2019-11-20": 8074.8432,
        "2019-11-21": 7612.7406,
        "2019-11-22": 7262.1105,
        "2019-11-23": 7303.4058,
        "2019-11-24": 7041.7329,
        "2019-11-25": 7211.8618,
        "2019-11-26": 7141.0694,
        "2019-11-27": 7523.4807,
        "2019-11-28": 7390.2075,
        "2019-11-29": 7729.2659,
        "2019-11-30": 7542.2356,
        "2019-12-01": 7381.963,
        "2019-12-02": 7333.4329,
        "2019-12-03": 7315.3678,
        "2019-12-04": 7213.7338,
        "2019-12-05": 7398.787,
        "2019-12-06": 7511.8806,
        "2019-12-07": 7532.1235,
        "2019-12-08": 7550.2392,
        "2019-12-09": 7333.096,
        "2019-12-10": 7239.7626,
        "2019-12-11": 7198.0667,
        "2019-12-12": 7190.2724,
        "2019-12-13": 7238.8743,
        "2019-12-14": 7087.025,
        "2019-12-15": 7112.7315,
        "2019-12-16": 6883.4964,
        "2019-12-17": 6584.0288,
        "2019-12-18": 7424.0154,
        "2019-12-19": 7147.5683,
        "2019-12-20": 7139.9334,
        "2019-12-21": 7286.3351,
        "2019-12-22": 7236.9862,
        "2019-12-23": 7166.1724,
        "2019-12-24": 7235.6267,
        "2019-12-25": 7212.8094,
        "2019-12-26": 7183.7065,
        "2019-12-27": 7227.2937,
        "2019-12-28": 7311.5606,
        "2019-12-29": 7385.4648,
        "2019-12-30": 7251.2768,
        "2019-12-31": 7179.9578,
        "2020-01-01": 7174.744,
        "2020-01-02": 6955.4876,
        "2020-01-03": 7291.2195,
        "2020-01-04": 7337.6367,
        "2020-01-05": 7347.4333,
        "2020-01-06": 7713.8608,
        "2020-01-07": 8039.6037,
        "2020-01-08": 8067.6064,
        "2020-01-09": 7808.7014,
        "2020-01-10": 8087.4529,
        "2020-01-11": 8078.9935,
        "2020-01-12": 8149.3137,
        "2020-01-13": 8116.961,
        "2020-01-14": 8735.1424,
        "2020-01-15": 8843.6757,
        "2020-01-16": 8711.6376,
        "2020-01-17": 8925.299,
        "2020-01-18": 8939.8643,
        "2020-01-19": 8638.1814,
        "2020-01-20": 8652.6838,
        "2020-01-21": 8708.786,
        "2020-01-22": 8635.0744,
        "2020-01-23": 8384.0888,
        "2020-01-24": 8451.2323,
        "2020-01-25": 8347.5675,
        "2020-01-26": 8562.3075,
        "2020-01-27": 8881.9624,
        "2020-01-28": 9131.115,
        "2020-01-29": 9320.9784,
        "2020-01-30": 9545.078,
        "2020-01-31": 9388.8808,
        "2020-02-01": 9363.1934,
        "2020-02-02": 9385.2604,
        "2020-02-03": 9269.707,
        "2020-02-04": 9177.8946,
        "2020-02-05": 9625.4566,
        "2020-02-06": 9681.3774,
        "2020-02-07": 9795.3441,
        "2020-02-08": 9927.7783,
        "2020-02-09": 10132.7065,
        "2020-02-10": 9838.9,
        "2020-02-11": 10236.6351,
        "2020-02-12": 10364.9263,
        "2020-02-13": 10218.0997,
        "2020-02-14": 10367.528,
        "2020-02-15": 9926.3537,
        "2020-02-16": 9876.235,
        "2020-02-17": 9636.6241,
        "2020-02-18": 10189.996,
        "2020-02-19": 9701.0372,
        "2020-02-20": 9631.4849,
        "2020-02-21": 9670.8587,
        "2020-02-22": 9689.0867,
        "2020-02-23": 9919.5514,
        "2020-02-24": 9640.4695,
        "2020-02-25": 9392.8696,
        "2020-02-26": 8787.9784,
        "2020-02-27": 8784.9954,
        "2020-02-28": 8778.4705,
        "2020-02-29": 8639.5914,
        "2020-03-01": 8548.9483,
        "2020-03-02": 8923.0444
    },
    "disclaimer": "This data was produced from the CoinDesk Bitcoin Price Index. BPI value data returned as USD.",
    "time": {
        "updated": "May 18, 2020 00:03:00 UTC",
        "updatedISO": "2020-05-18T00:03:00+00:00"
    }
};

const prices = Object.values(historical.bpi);
function isPrime(num) {
  if (num <= 1) {
    return false; // Numbers less than or equal to 1 are not prime
  }
  for (let i = 2; i <= Math.sqrt(num); i++) {
    if (num % i === 0) {
      return false; // If num is divisible by any number other than 1 and itself
    }
  }
  return true; // If no divisors were found, num is a prime number
}
const getEveryNthItem = (arr, n) => {
  // Ensure n is a positive integer
  if (n <= 0 || !Number.isInteger(n)) {
    console.error("The 'n' value must be a positive integer.");
    return [];
  }

  return arr.filter((element, index) => {
    // The modulo operator returns the remainder of a division.
    // For every nth item (starting from the first item at index 0),
    // the index + 1 will be a multiple of n.
    // So, (index + 1) % n === 0 will be true for every nth item.
    return (index + 1) % n === 0;
  });
};

let leastSats = 10**8;

for(let i = 0; i < prices.length; i+=1){
    let tempArr = getEveryNthItem(prices, i+1);
    tempArr = tempArr.map(x => Math.floor(((i+1)/x)*10**8));
    const total = tempArr.reduce((a,b) => a+b);
    if(total < leastSats && isPrime(total))
    {
        console.log(i);
        leastSats = total;
    }
}
console.log('-------------')
console.log(leastSats);
console.log(leastSats.toLocaleString());
console.log(leastSats / 10 ** 8);